{"cells":[{"attachments":{},"cell_type":"markdown","metadata":{},"source":["TP AX25 Helec"]},{"attachments":{},"cell_type":"markdown","metadata":{},"source":["2. Protocole AX25\n","\n","a) Écrire le programme en Python qui lit les données des trames AX25 issue d’un satellite\n","depuis un fichier texte. Le fichier texte est compatible avec le format utilisé sur le site\n","satnogs.org (voir question suivante) : chaque octet est représenté en hexadécimal, codé en\n","ASCII, séparée par un espace. Votre programme doit décoder et afficher l’entête AX25.\n","On donne sur moodle quelques fichiers que vous pouvez utiliser"]},{"cell_type":"code","execution_count":2,"metadata":{},"outputs":[],"source":["def decodage():\n","    global liste\n","    liste = []\n","    # fichier = str(input(\"Entrez le nom du fichier a decoder : \"))\n","    fichier = \"/home/bastien/But-1ere-annee/R200/R221/trames AX25/robusta1B-1-5-2023.txt\"\n","    f = open(fichier, \"r\", encoding=\"utf-8\")\n","    contenu = f.read()\n","    # print(contenu)\n","    f.close()\n","    # print(type(contenu))\n","    contenu=contenu.split()\n","    for i in range(len(contenu)):\n","        # print(contenu[i])\n","        liste.append(contenu[i])\n","\n","    for x in range(len(liste)):\n","        result=int(liste[x], 16)\n","        # print(result)\n","decodage()"]},{"cell_type":"code","execution_count":38,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["F 4 K J E   \n","96\n","F X 6 F R   \n","97\n","3\n","240\n","['21', '94', '44', '4F', '64', 'FF', 'FF', 'FF', 'FF', 'FF', 'FF', '01', '02', '01', '2C', '01', '2C', '01', 'FF', 'FF', 'FF', 'FF', 'FF', 'FF', '01', '00', '01', '00', '08', '02', 'FB', '02', 'E2', '00', 'E3', '01', 'E3', '00', 'E6', '01', 'F4', '02', 'F4', '02', 'F4', '02', 'F3', '02', 'FF', '03', 'FF', '03', 'FF', '03', 'FF', '03', '00', '00', '00', '00', '00', '00', '00', '00', '0C', '00', '0C', '00', '0C', '00', '0C', '00', 'FC', '01', 'B5', '02', 'FB', '01', 'F3', '02', '6B', '00', 'E5', '00', '69', '00', 'E1', '00', 'F2', '02', 'F2', '02', 'F2', '02', 'F2', '02', 'FF', '03', 'FF', '03', 'FF', '03', 'FF', '03', '00', '00', '00', '00', '00', '00', '00', '00', '0C', '00', '0C', '00', '19', '00', '0C', '00', '09', '00', '36', '00', '92', '0D', '0A', '00', '36', '00', '81', '0D', '37', '01', '96', '00', '96', '00', '02', '04', '1F', '03', 'DB', '03', 'D2', '14', 'F4', '05', '2C', '01', 'DE', '13', 'E6', '03', '8D', '13', 'E2', '03', 'DC', '0F', '07', '07', '4A', '12', '6E', '03', '99', '03', '5E', '12', '62', '02', '73', '00', '00', '00', '48', '94', 'FE', '4E', '64', '8F', '00', '00', '4E', '94', '44', '4F', '64', '00', '00', '00', '53', '9D', '44', '4F', '64', '00', '00', '00', '53', 'F3', '4D', 'F5', '63', '00', '00', '00', '4E', '75', 'F6', '5C', '59', '00', '00', '00', '53', '7E', 'F6', '5C', '59', '00', '00', '00', '53', '33', '82', '53', '59', '00', '00', '00', '4E', 'E6', '39', '51', '59', '00', '00', '00', '53', 'EF', '39', '51', '59', '00', '00', '00', '77', '73', '0C', '64', '52', '00', '00']\n"]}],"source":["def entete():\n","    decodage()\n","    global info\n","    destnmb=[]\n","    destname=[]\n","    dest = liste[0:6]\n","    Dssid=liste[6]\n","    Src=liste[7:13]\n","    Srcnmb=[]\n","    Srcname=[]\n","    Sssid=liste[13]\n","    ctrl=liste[14]\n","    pid=liste[15]\n","    info=liste[16:-1]\n","    # print(dest)\n","    for i in range(len(dest)):\n","        # print(int(dest[i], 16),end=\" \")\n","        destnmb.append(int(dest[i], 16))\n","        destname.append(chr(destnmb[i]>>1))\n","        print(destname[i],end=\" \")\n","    print(end=\"\\n\")    \n","    # print(Dssid)\n","    print(int(Dssid, 16))\n","    # print(Src)\n","    for i in range(len(Src)):\n","        # print(int(dest[i], 16),end=\" \")\n","        Srcnmb.append(int(Src[i], 16))\n","        Srcname.append(chr(Srcnmb[i]>>1))\n","        print(Srcname[i],end=\" \")\n","    print(end=\"\\n\")\n","    print(int(Sssid, 16))\n","    print(int(ctrl, 16))\n","    print(int(pid, 16))\n","    print(info)\n","\n","\n","entete()\n"]},{"attachments":{},"cell_type":"markdown","metadata":{},"source":["4. Décodage des données du satellite Robusta-1B\n","Vous trouverez en annexe un extrait du format des données encapsulées dans la trame AX25 pour le\n","satellite Robusta-1B. Ce satellite embarque plusieurs expériences de mesures de l’effet des rayons\n","cosmique sur des composants électroniques.\n","Pour visualiser ces données vous pouvez rejoindre l’onglet de la mission Robusta-1B du MCC de la\n","machine virtuelle du segment sol (vgseg)."]},{"attachments":{},"cell_type":"markdown","metadata":{},"source":["a) Selon moi les données de télémétrie du satellite sont les données de température , de localisation et de tension de la batterie. Les données de température sont les données les plus importantes car elles permettent de savoir si le satellite est en surchauffe ou non. Les données de localisation permettent de savoir où se trouve le satellite et les données de tension de la batterie permettent de savoir si le satellite est en train de se décharger ou non. "]},{"attachments":{},"cell_type":"markdown","metadata":{},"source":["b) les données de télémétrie sont un atout majeur dans le bon finctionnement du satellite car elles permettent de savoir si le satellite est en surchauffe ou non, si il est en train de se décharger ou non et où il se trouve, on encore simplement du coté scientifique pour obtenir la température actuelle du satellite pour certains composant et ainsi de suite."]},{"attachments":{},"cell_type":"markdown","metadata":{},"source":["c) a quoi servent les données de événements passés ?  \n","Les données d'événements passés servent à savoir si le satellite a subit des événements particuliers comme par exemple une surchauffe ou une décharge de la batterie. \n"]},{"attachments":{},"cell_type":"markdown","metadata":{},"source":["d) Compléter le programme précédent pour afficher les données de télémétrie du satellite."]},{"cell_type":"code","execution_count":39,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["F 4 K J E   \n","96\n","F X 6 F R   \n","97\n","3\n","240\n","['21', '94', '44', '4F', '64', 'FF', 'FF', 'FF', 'FF', 'FF', 'FF', '01', '02', '01', '2C', '01', '2C', '01', 'FF', 'FF', 'FF', 'FF', 'FF', 'FF', '01', '00', '01', '00', '08', '02', 'FB', '02', 'E2', '00', 'E3', '01', 'E3', '00', 'E6', '01', 'F4', '02', 'F4', '02', 'F4', '02', 'F3', '02', 'FF', '03', 'FF', '03', 'FF', '03', 'FF', '03', '00', '00', '00', '00', '00', '00', '00', '00', '0C', '00', '0C', '00', '0C', '00', '0C', '00', 'FC', '01', 'B5', '02', 'FB', '01', 'F3', '02', '6B', '00', 'E5', '00', '69', '00', 'E1', '00', 'F2', '02', 'F2', '02', 'F2', '02', 'F2', '02', 'FF', '03', 'FF', '03', 'FF', '03', 'FF', '03', '00', '00', '00', '00', '00', '00', '00', '00', '0C', '00', '0C', '00', '19', '00', '0C', '00', '09', '00', '36', '00', '92', '0D', '0A', '00', '36', '00', '81', '0D', '37', '01', '96', '00', '96', '00', '02', '04', '1F', '03', 'DB', '03', 'D2', '14', 'F4', '05', '2C', '01', 'DE', '13', 'E6', '03', '8D', '13', 'E2', '03', 'DC', '0F', '07', '07', '4A', '12', '6E', '03', '99', '03', '5E', '12', '62', '02', '73', '00', '00', '00', '48', '94', 'FE', '4E', '64', '8F', '00', '00', '4E', '94', '44', '4F', '64', '00', '00', '00', '53', '9D', '44', '4F', '64', '00', '00', '00', '53', 'F3', '4D', 'F5', '63', '00', '00', '00', '4E', '75', 'F6', '5C', '59', '00', '00', '00', '53', '7E', 'F6', '5C', '59', '00', '00', '00', '53', '33', '82', '53', '59', '00', '00', '00', '4E', 'E6', '39', '51', '59', '00', '00', '00', '53', 'EF', '39', '51', '59', '00', '00', '00', '77', '73', '0C', '64', '52', '00', '00']\n"]}],"source":["entete()\n"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.6"},"orig_nbformat":4},"nbformat":4,"nbformat_minor":2}